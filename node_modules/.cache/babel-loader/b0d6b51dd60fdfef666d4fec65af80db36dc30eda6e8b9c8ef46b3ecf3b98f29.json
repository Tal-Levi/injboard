{"ast":null,"code":"import React,{useState,useEffect}from'react';import{supabase}from'./supabaseClient';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";function Statistics(){const[allPlayersForStats,setAllPlayersForStats]=useState([]);const[PieComponent,setPieComponent]=useState(null);const[BarComponent,setBarComponent]=useState(null);useEffect(()=>{// Dynamically import chart components to avoid React version conflicts\nimport('react-chartjs-2').then(module=>{setPieComponent(()=>module.Pie);setBarComponent(()=>module.Bar);});const fetchPlayers=async()=>{const{data:allData,error:allError}=await supabase.from('players').select('*');if(allError){console.error('Error fetching all players for stats:',allError);}else{setAllPlayersForStats(allData);}};fetchPlayers();},[]);// Statistics calculations\nconst getStats=()=>{const currentYear=new Date().getFullYear();const playersThisYear=allPlayersForStats.filter(player=>player.injury_date&&new Date(player.injury_date).getFullYear()===currentYear);const totalInjuredPlayersThisYear=playersThisYear.length;const recoveredPlayersThisYear=allPlayersForStats.filter(player=>player.recovery_date&&new Date(player.recovery_date).getFullYear()===currentYear);const totalRecoveredPlayersThisYear=recoveredPlayersThisYear.length;let totalInjuredDays=0;allPlayersForStats.forEach(player=>{if(player.injury_date&&player.recovery_date){const injuryDate=new Date(player.injury_date);const recoveryDate=new Date(player.recovery_date);const diffTime=Math.abs(recoveryDate-injuryDate);const diffDays=Math.ceil(diffTime/(1000*60*60*24));totalInjuredDays+=diffDays;}});// Calculate most common injuries\nconst injuryTypes={};playersThisYear.forEach(player=>{if(player.injury_type_hebrew){injuryTypes[player.injury_type_hebrew]=(injuryTypes[player.injury_type_hebrew]||0)+1;}});const injuryLabels=Object.keys(injuryTypes);const injuryCounts=Object.values(injuryTypes);// Calculate most injured players by days\nconst playerInjuryDays={};playersThisYear.forEach(player=>{if(player.injury_date&&player.recovery_date){const injuryDate=new Date(player.injury_date);const recoveryDate=new Date(player.recovery_date);const diffTime=Math.abs(recoveryDate-injuryDate);const diffDays=Math.ceil(diffTime/(1000*60*60*24));playerInjuryDays[player.name_hebrew]=(playerInjuryDays[player.name_hebrew]||0)+diffDays;}});const playerLabels=Object.keys(playerInjuryDays);const playerDays=Object.values(playerInjuryDays);// Calculate Average Recovery Time by Injury Type\nconst injuryRecoveryTimes={};allPlayersForStats.forEach(player=>{if(player.injury_type_hebrew&&player.injury_date&&player.recovery_date){const injuryDate=new Date(player.injury_date);const recoveryDate=new Date(player.recovery_date);const diffTime=Math.abs(recoveryDate-injuryDate);const diffDays=Math.ceil(diffTime/(1000*60*60*24));if(!injuryRecoveryTimes[player.injury_type_hebrew]){injuryRecoveryTimes[player.injury_type_hebrew]={sum:0,count:0};}injuryRecoveryTimes[player.injury_type_hebrew].sum+=diffDays;injuryRecoveryTimes[player.injury_type_hebrew].count+=1;}});const avgRecoveryLabels=Object.keys(injuryRecoveryTimes);const avgRecoveryDays=Object.values(injuryRecoveryTimes).map(item=>Math.round(item.sum/item.count));// Calculate Injury Trends Over Months\nconst monthlyInjuries=Array(12).fill(0);playersThisYear.forEach(player=>{if(player.injury_date){const month=new Date(player.injury_date).getMonth();monthlyInjuries[month]+=1;}});const monthLabels=['ינואר','פברואר','מרץ','אפריל','מאי','יוני','יולי','אוגוסט','ספטמבר','אוקטובר','נובמבר','דצמבר'];return{totalInjuredPlayersThisYear,totalInjuredDays,injuryLabels,injuryCounts,playerLabels,playerDays,totalRecoveredPlayersThisYear,avgRecoveryLabels,avgRecoveryDays,monthLabels,monthlyInjuries};};const{totalInjuredPlayersThisYear,totalInjuredDays,injuryLabels,injuryCounts,playerLabels,playerDays,totalRecoveredPlayersThisYear,avgRecoveryLabels,avgRecoveryDays,monthLabels,monthlyInjuries}=getStats();const pieChartData={labels:injuryLabels,datasets:[{label:'סוגי פציעות',data:injuryCounts,backgroundColor:['rgba(255, 99, 132, 0.2)','rgba(54, 162, 235, 0.2)','rgba(255, 206, 86, 0.2)','rgba(75, 192, 192, 0.2)','rgba(153, 102, 255, 0.2)','rgba(255, 159, 64, 0.2)'],borderColor:['rgba(255, 99, 132, 1)','rgba(54, 162, 235, 1)','rgba(255, 206, 86, 1)','rgba(75, 192, 192, 1)','rgba(153, 102, 255, 1)','rgba(255, 159, 64, 1)'],borderWidth:1}]};const barChartData={labels:playerLabels,datasets:[{label:'ימי פציעה',data:playerDays,backgroundColor:'rgba(54, 162, 235, 0.2)',borderColor:'rgba(54, 162, 235, 1)',borderWidth:1}]};const avgRecoveryChartData={labels:avgRecoveryLabels,datasets:[{label:'ימי החלמה ממוצעים',data:avgRecoveryDays,backgroundColor:'rgba(75, 192, 192, 0.2)',borderColor:'rgba(75, 192, 192, 1)',borderWidth:1}]};const monthlyInjuryChartData={labels:monthLabels,datasets:[{label:'פציעות לפי חודש',data:monthlyInjuries,backgroundColor:'rgba(255, 206, 86, 0.2)',borderColor:'rgba(255, 206, 86, 1)',borderWidth:1}]};return/*#__PURE__*/_jsxs(\"div\",{className:\"statistics-page\",children:[/*#__PURE__*/_jsx(\"h2\",{children:\"\\u05E1\\u05D8\\u05D8\\u05D9\\u05E1\\u05D8\\u05D9\\u05E7\\u05D5\\u05EA \\u05E4\\u05E6\\u05D9\\u05E2\\u05D5\\u05EA\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"statistics\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"stats-text\",children:[/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsxs(\"p\",{children:[/*#__PURE__*/_jsx(\"strong\",{children:\"\\u05E1\\u05D4\\\"\\u05DB \\u05E9\\u05D7\\u05E7\\u05E0\\u05D9\\u05DD \\u05E9\\u05E0\\u05E4\\u05E6\\u05E2\\u05D5 \\u05D4\\u05E9\\u05E0\\u05D4:\"}),\" \",totalInjuredPlayersThisYear]}),/*#__PURE__*/_jsxs(\"p\",{children:[/*#__PURE__*/_jsx(\"strong\",{children:\"\\u05E1\\u05D4\\\"\\u05DB \\u05E9\\u05D7\\u05E7\\u05E0\\u05D9\\u05DD \\u05E9\\u05D4\\u05D7\\u05DC\\u05D9\\u05DE\\u05D5 \\u05D4\\u05E9\\u05E0\\u05D4:\"}),\" \",totalRecoveredPlayersThisYear]})]}),/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsxs(\"p\",{children:[/*#__PURE__*/_jsx(\"strong\",{children:\"\\u05E1\\u05D4\\\"\\u05DB \\u05D9\\u05DE\\u05D9 \\u05E4\\u05E6\\u05D9\\u05E2\\u05D4 \\u05DE\\u05E6\\u05D8\\u05D1\\u05E8\\u05D9\\u05DD:\"}),\" \",totalInjuredDays]})})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"charts-container\",children:[PieComponent&&/*#__PURE__*/_jsxs(\"div\",{className:\"chart-wrapper\",children:[/*#__PURE__*/_jsx(\"h3\",{children:\"\\u05E1\\u05D5\\u05D2\\u05D9 \\u05E4\\u05E6\\u05D9\\u05E2\\u05D5\\u05EA\"}),/*#__PURE__*/_jsx(PieComponent,{data:pieChartData})]}),BarComponent&&/*#__PURE__*/_jsxs(\"div\",{className:\"chart-wrapper\",children:[/*#__PURE__*/_jsx(\"h3\",{children:\"\\u05E9\\u05D7\\u05E7\\u05E0\\u05D9\\u05DD \\u05E2\\u05DD \\u05D4\\u05DB\\u05D9 \\u05D4\\u05E8\\u05D1\\u05D4 \\u05D9\\u05DE\\u05D9 \\u05E4\\u05E6\\u05D9\\u05E2\\u05D4\"}),/*#__PURE__*/_jsx(BarComponent,{data:barChartData,options:{indexAxis:'y',responsive:true,plugins:{legend:{position:'bottom'}}}})]}),BarComponent&&/*#__PURE__*/_jsxs(\"div\",{className:\"chart-wrapper\",children:[/*#__PURE__*/_jsx(\"h3\",{children:\"\\u05D9\\u05DE\\u05D9 \\u05D4\\u05D7\\u05DC\\u05DE\\u05D4 \\u05DE\\u05DE\\u05D5\\u05E6\\u05E2\\u05D9\\u05DD \\u05DC\\u05E4\\u05D9 \\u05E1\\u05D5\\u05D2 \\u05E4\\u05E6\\u05D9\\u05E2\\u05D4\"}),/*#__PURE__*/_jsx(BarComponent,{data:avgRecoveryChartData,options:{indexAxis:'y',responsive:true,plugins:{legend:{position:'bottom'}}}})]}),BarComponent&&/*#__PURE__*/_jsxs(\"div\",{className:\"chart-wrapper\",children:[/*#__PURE__*/_jsx(\"h3\",{children:\"\\u05DE\\u05D2\\u05DE\\u05D5\\u05EA \\u05E4\\u05E6\\u05D9\\u05E2\\u05D5\\u05EA \\u05DC\\u05E4\\u05D9 \\u05D7\\u05D5\\u05D3\\u05E9\\u05D9\\u05DD\"}),/*#__PURE__*/_jsx(BarComponent,{data:monthlyInjuryChartData,options:{responsive:true,plugins:{legend:{position:'bottom'}}}})]})]})]})]});}export default Statistics;","map":{"version":3,"names":["React","useState","useEffect","supabase","jsx","_jsx","jsxs","_jsxs","Statistics","allPlayersForStats","setAllPlayersForStats","PieComponent","setPieComponent","BarComponent","setBarComponent","then","module","Pie","Bar","fetchPlayers","data","allData","error","allError","from","select","console","getStats","currentYear","Date","getFullYear","playersThisYear","filter","player","injury_date","totalInjuredPlayersThisYear","length","recoveredPlayersThisYear","recovery_date","totalRecoveredPlayersThisYear","totalInjuredDays","forEach","injuryDate","recoveryDate","diffTime","Math","abs","diffDays","ceil","injuryTypes","injury_type_hebrew","injuryLabels","Object","keys","injuryCounts","values","playerInjuryDays","name_hebrew","playerLabels","playerDays","injuryRecoveryTimes","sum","count","avgRecoveryLabels","avgRecoveryDays","map","item","round","monthlyInjuries","Array","fill","month","getMonth","monthLabels","pieChartData","labels","datasets","label","backgroundColor","borderColor","borderWidth","barChartData","avgRecoveryChartData","monthlyInjuryChartData","className","children","options","indexAxis","responsive","plugins","legend","position"],"sources":["/Users/tallevi/personal-repos/injboard/src/Statistics.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { supabase } from './supabaseClient';\n\nfunction Statistics() {\n  const [allPlayersForStats, setAllPlayersForStats] = useState([]);\n  const [PieComponent, setPieComponent] = useState(null);\n  const [BarComponent, setBarComponent] = useState(null);\n\n  useEffect(() => {\n    // Dynamically import chart components to avoid React version conflicts\n    import('react-chartjs-2').then((module) => {\n      setPieComponent(() => module.Pie);\n      setBarComponent(() => module.Bar);\n    });\n\n    const fetchPlayers = async () => {\n      const { data: allData, error: allError } = await supabase.from('players').select('*');\n      if (allError) {\n        console.error('Error fetching all players for stats:', allError);\n      } else {\n        setAllPlayersForStats(allData);\n      }\n    };\n\n    fetchPlayers();\n  }, []);\n\n  // Statistics calculations\n  const getStats = () => {\n    const currentYear = new Date().getFullYear();\n    const playersThisYear = allPlayersForStats.filter(player =>\n      player.injury_date && new Date(player.injury_date).getFullYear() === currentYear\n    );\n    \n    const totalInjuredPlayersThisYear = playersThisYear.length;\n\n    const recoveredPlayersThisYear = allPlayersForStats.filter(player =>\n      player.recovery_date && new Date(player.recovery_date).getFullYear() === currentYear\n    );\n    const totalRecoveredPlayersThisYear = recoveredPlayersThisYear.length;\n\n    let totalInjuredDays = 0;\n    allPlayersForStats.forEach(player => {\n      if (player.injury_date && player.recovery_date) {\n        const injuryDate = new Date(player.injury_date);\n        const recoveryDate = new Date(player.recovery_date);\n        const diffTime = Math.abs(recoveryDate - injuryDate);\n        const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n        totalInjuredDays += diffDays;\n      }\n    });\n\n    // Calculate most common injuries\n    const injuryTypes = {};\n    playersThisYear.forEach(player => {\n      if (player.injury_type_hebrew) {\n        injuryTypes[player.injury_type_hebrew] = (injuryTypes[player.injury_type_hebrew] || 0) + 1;\n      }\n    });\n\n    const injuryLabels = Object.keys(injuryTypes);\n    const injuryCounts = Object.values(injuryTypes);\n\n    // Calculate most injured players by days\n    const playerInjuryDays = {};\n    playersThisYear.forEach(player => {\n      if (player.injury_date && player.recovery_date) {\n        const injuryDate = new Date(player.injury_date);\n        const recoveryDate = new Date(player.recovery_date);\n        const diffTime = Math.abs(recoveryDate - injuryDate);\n        const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n        playerInjuryDays[player.name_hebrew] = (playerInjuryDays[player.name_hebrew] || 0) + diffDays;\n      }\n    });\n\n    const playerLabels = Object.keys(playerInjuryDays);\n    const playerDays = Object.values(playerInjuryDays);\n\n    // Calculate Average Recovery Time by Injury Type\n    const injuryRecoveryTimes = {};\n    allPlayersForStats.forEach(player => {\n      if (player.injury_type_hebrew && player.injury_date && player.recovery_date) {\n        const injuryDate = new Date(player.injury_date);\n        const recoveryDate = new Date(player.recovery_date);\n        const diffTime = Math.abs(recoveryDate - injuryDate);\n        const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n        if (!injuryRecoveryTimes[player.injury_type_hebrew]) {\n          injuryRecoveryTimes[player.injury_type_hebrew] = { sum: 0, count: 0 };\n        }\n        injuryRecoveryTimes[player.injury_type_hebrew].sum += diffDays;\n        injuryRecoveryTimes[player.injury_type_hebrew].count += 1;\n      }\n    });\n    const avgRecoveryLabels = Object.keys(injuryRecoveryTimes);\n    const avgRecoveryDays = Object.values(injuryRecoveryTimes).map(item => Math.round(item.sum / item.count));\n\n    // Calculate Injury Trends Over Months\n    const monthlyInjuries = Array(12).fill(0);\n    playersThisYear.forEach(player => {\n      if (player.injury_date) {\n        const month = new Date(player.injury_date).getMonth();\n        monthlyInjuries[month] += 1;\n      }\n    });\n    const monthLabels = ['ינואר', 'פברואר', 'מרץ', 'אפריל', 'מאי', 'יוני', 'יולי', 'אוגוסט', 'ספטמבר', 'אוקטובר', 'נובמבר', 'דצמבר'];\n\n    return { \n      totalInjuredPlayersThisYear, \n      totalInjuredDays, \n      injuryLabels, \n      injuryCounts, \n      playerLabels, \n      playerDays, \n      totalRecoveredPlayersThisYear, \n      avgRecoveryLabels, \n      avgRecoveryDays, \n      monthLabels, \n      monthlyInjuries \n    };\n  };\n\n  const { \n    totalInjuredPlayersThisYear, \n    totalInjuredDays, \n    injuryLabels, \n    injuryCounts, \n    playerLabels, \n    playerDays, \n    totalRecoveredPlayersThisYear, \n    avgRecoveryLabels, \n    avgRecoveryDays, \n    monthLabels, \n    monthlyInjuries \n  } = getStats();\n\n  const pieChartData = {\n    labels: injuryLabels,\n    datasets: [\n      {\n        label: 'סוגי פציעות',\n        data: injuryCounts,\n        backgroundColor: [\n          'rgba(255, 99, 132, 0.2)',\n          'rgba(54, 162, 235, 0.2)',\n          'rgba(255, 206, 86, 0.2)',\n          'rgba(75, 192, 192, 0.2)',\n          'rgba(153, 102, 255, 0.2)',\n          'rgba(255, 159, 64, 0.2)',\n        ],\n        borderColor: [\n          'rgba(255, 99, 132, 1)',\n          'rgba(54, 162, 235, 1)',\n          'rgba(255, 206, 86, 1)',\n          'rgba(75, 192, 192, 1)',\n          'rgba(153, 102, 255, 1)',\n          'rgba(255, 159, 64, 1)',\n        ],\n        borderWidth: 1,\n      },\n    ],\n  };\n\n  const barChartData = {\n    labels: playerLabels,\n    datasets: [\n      {\n        label: 'ימי פציעה',\n        data: playerDays,\n        backgroundColor: 'rgba(54, 162, 235, 0.2)',\n        borderColor: 'rgba(54, 162, 235, 1)',\n        borderWidth: 1,\n      },\n    ],\n  };\n\n  const avgRecoveryChartData = {\n    labels: avgRecoveryLabels,\n    datasets: [\n      {\n        label: 'ימי החלמה ממוצעים',\n        data: avgRecoveryDays,\n        backgroundColor: 'rgba(75, 192, 192, 0.2)',\n        borderColor: 'rgba(75, 192, 192, 1)',\n        borderWidth: 1,\n      },\n    ],\n  };\n\n  const monthlyInjuryChartData = {\n    labels: monthLabels,\n    datasets: [\n      {\n        label: 'פציעות לפי חודש',\n        data: monthlyInjuries,\n        backgroundColor: 'rgba(255, 206, 86, 0.2)',\n        borderColor: 'rgba(255, 206, 86, 1)',\n        borderWidth: 1,\n      },\n    ],\n  };\n\n  return (\n    <div className=\"statistics-page\">\n      <h2>סטטיסטיקות פציעות</h2>\n      <div className=\"statistics\">\n        <div className=\"stats-text\">\n          <div>\n            <p><strong>סה\"כ שחקנים שנפצעו השנה:</strong> {totalInjuredPlayersThisYear}</p>\n            <p><strong>סה\"כ שחקנים שהחלימו השנה:</strong> {totalRecoveredPlayersThisYear}</p>\n          </div>\n          <div>\n            <p><strong>סה\"כ ימי פציעה מצטברים:</strong> {totalInjuredDays}</p>\n          </div>\n        </div>\n        <div className=\"charts-container\">\n          {PieComponent && (\n            <div className=\"chart-wrapper\">\n              <h3>סוגי פציעות</h3>\n              <PieComponent data={pieChartData} />\n            </div>\n          )}\n          {BarComponent && (\n            <div className=\"chart-wrapper\">\n              <h3>שחקנים עם הכי הרבה ימי פציעה</h3>\n              <BarComponent \n                data={barChartData} \n                options={{\n                  indexAxis: 'y',\n                  responsive: true,\n                  plugins: {\n                    legend: {\n                      position: 'bottom',\n                    },\n                  },\n                }} \n              />\n            </div>\n          )}\n          {BarComponent && (\n            <div className=\"chart-wrapper\">\n              <h3>ימי החלמה ממוצעים לפי סוג פציעה</h3>\n              <BarComponent \n                data={avgRecoveryChartData} \n                options={{\n                  indexAxis: 'y',\n                  responsive: true,\n                  plugins: {\n                    legend: {\n                      position: 'bottom',\n                    },\n                  },\n                }} \n              />\n            </div>\n          )}\n          {BarComponent && (\n            <div className=\"chart-wrapper\">\n              <h3>מגמות פציעות לפי חודשים</h3>\n              <BarComponent \n                data={monthlyInjuryChartData} \n                options={{\n                  responsive: true,\n                  plugins: {\n                    legend: {\n                      position: 'bottom',\n                    },\n                  },\n                }} \n              />\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Statistics; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}