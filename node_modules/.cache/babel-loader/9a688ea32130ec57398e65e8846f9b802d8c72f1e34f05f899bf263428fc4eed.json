{"ast":null,"code":"import React,{useState,useEffect}from'react';import{supabase}from'./supabaseClient';import bcrypt from'bcryptjs';import{useNavigate}from'react-router-dom';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";function Admin(){const[email,setEmail]=useState('');const[password,setPassword]=useState('');const[message,setMessage]=useState('');const[isRegistering,setIsRegistering]=useState(false);const navigate=useNavigate();useEffect(()=>{// Check if user is already logged in\nconst isLoggedIn=localStorage.getItem('isLoggedIn')==='true';if(isLoggedIn){navigate('/dashboard');}},[navigate]);const handleAuth=async e=>{e.preventDefault();setMessage('');if(isRegistering){try{// Require an admin code for registration\n// IMPORTANT: Replace 'your-secret-code' below with a strong, unique secret code known only to authorized administrators\nconst adminCode=prompt('Enter admin registration code:');if(adminCode!=='your-secret-code'){// Replace with your actual secret code\nsetMessage('Registration failed: Invalid admin code');return;}const salt=await bcrypt.genSalt(10);const hashedPassword=await bcrypt.hash(password,salt);const{error}=await supabase.from('users').insert([{email,hashed_password:hashedPassword,role:'viewer'}]);if(error){console.error('Supabase registration error:',error);setMessage('Registration failed: '+(error.message||'Unknown error'));}else{setMessage('Registration successful! Please login.');setEmail('');setPassword('');setIsRegistering(false);}}catch(e){console.error('Client-side hashing or registration error:',e);setMessage('Registration failed due to an internal error.');}}else{// Handle login\nconst{data:userEntry,error:fetchError}=await supabase.from('users').select('hashed_password, role').eq('email',email).single();if(fetchError||!userEntry){setMessage('Login failed: Invalid credentials.');return;}const match=await bcrypt.compare(password,userEntry.hashed_password);if(match){setMessage('Login successful!');localStorage.setItem('isLoggedIn','true');localStorage.setItem('userRole',userEntry.role);navigate('/dashboard');}else{setMessage('Login failed: Invalid credentials.');}}};return/*#__PURE__*/_jsx(\"div\",{className:\"admin-container\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"login-box\",children:[/*#__PURE__*/_jsx(\"h2\",{children:isRegistering?'Register Admin':'Admin Login'}),/*#__PURE__*/_jsxs(\"form\",{onSubmit:handleAuth,children:[/*#__PURE__*/_jsxs(\"div\",{className:\"input-group\",children:[/*#__PURE__*/_jsx(\"label\",{htmlFor:\"email\",children:\"Email:\"}),/*#__PURE__*/_jsx(\"input\",{type:\"email\",id:\"email\",placeholder:\"Enter your email\",value:email,onChange:e=>setEmail(e.target.value),required:true,className:\"input-field\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"input-group\",children:[/*#__PURE__*/_jsx(\"label\",{htmlFor:\"password\",children:\"Password:\"}),/*#__PURE__*/_jsx(\"input\",{type:\"password\",id:\"password\",placeholder:\"Enter your password\",value:password,onChange:e=>setPassword(e.target.value),required:true,className:\"input-field\"})]}),/*#__PURE__*/_jsx(\"button\",{type:\"submit\",className:\"login-button\",children:isRegistering?'Register':'Login'})]}),/*#__PURE__*/_jsx(\"button\",{onClick:()=>setIsRegistering(!isRegistering),className:\"toggle-button\",children:isRegistering?'Already have an account? Login':\"Don't have an account? Register\"}),message&&/*#__PURE__*/_jsx(\"p\",{className:\"message\",children:message})]})});}export default Admin;","map":{"version":3,"names":["React","useState","useEffect","supabase","bcrypt","useNavigate","jsx","_jsx","jsxs","_jsxs","Admin","email","setEmail","password","setPassword","message","setMessage","isRegistering","setIsRegistering","navigate","isLoggedIn","localStorage","getItem","handleAuth","e","preventDefault","adminCode","prompt","salt","genSalt","hashedPassword","hash","error","from","insert","hashed_password","role","console","data","userEntry","fetchError","select","eq","single","match","compare","setItem","className","children","onSubmit","htmlFor","type","id","placeholder","value","onChange","target","required","onClick"],"sources":["/Users/tallevi/personal-repos/injboard/src/Admin.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { supabase } from './supabaseClient';\nimport bcrypt from 'bcryptjs';\nimport { useNavigate } from 'react-router-dom';\n\nfunction Admin() {\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [message, setMessage] = useState('');\n  const [isRegistering, setIsRegistering] = useState(false);\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    // Check if user is already logged in\n    const isLoggedIn = localStorage.getItem('isLoggedIn') === 'true';\n    if (isLoggedIn) {\n      navigate('/dashboard');\n    }\n  }, [navigate]);\n\n  const handleAuth = async (e) => {\n    e.preventDefault();\n    setMessage('');\n\n    if (isRegistering) {\n      try {\n        // Require an admin code for registration\n        // IMPORTANT: Replace 'your-secret-code' below with a strong, unique secret code known only to authorized administrators\n        const adminCode = prompt('Enter admin registration code:');\n        if (adminCode !== 'your-secret-code') { // Replace with your actual secret code\n          setMessage('Registration failed: Invalid admin code');\n          return;\n        }\n        \n        const salt = await bcrypt.genSalt(10);\n        const hashedPassword = await bcrypt.hash(password, salt);\n\n        const { error } = await supabase\n          .from('users')\n          .insert([{ email, hashed_password: hashedPassword, role: 'viewer' }]);\n\n        if (error) {\n          console.error('Supabase registration error:', error);\n          setMessage('Registration failed: ' + (error.message || 'Unknown error'));\n        } else {\n          setMessage('Registration successful! Please login.');\n          setEmail('');\n          setPassword('');\n          setIsRegistering(false);\n        }\n      } catch (e) {\n        console.error('Client-side hashing or registration error:', e);\n        setMessage('Registration failed due to an internal error.');\n      }\n    } else {\n      // Handle login\n      const { data: userEntry, error: fetchError } = await supabase\n        .from('users')\n        .select('hashed_password, role')\n        .eq('email', email)\n        .single();\n\n      if (fetchError || !userEntry) {\n        setMessage('Login failed: Invalid credentials.');\n        return;\n      }\n\n      const match = await bcrypt.compare(password, userEntry.hashed_password);\n\n      if (match) {\n        setMessage('Login successful!');\n        localStorage.setItem('isLoggedIn', 'true');\n        localStorage.setItem('userRole', userEntry.role);\n        navigate('/dashboard');\n      } else {\n        setMessage('Login failed: Invalid credentials.');\n      }\n    }\n  };\n\n  return (\n    <div className=\"admin-container\">\n      <div className=\"login-box\">\n        <h2>{isRegistering ? 'Register Admin' : 'Admin Login'}</h2>\n        <form onSubmit={handleAuth}>\n          <div className=\"input-group\">\n            <label htmlFor=\"email\">Email:</label>\n            <input\n              type=\"email\"\n              id=\"email\"\n              placeholder=\"Enter your email\"\n              value={email}\n              onChange={(e) => setEmail(e.target.value)}\n              required\n              className=\"input-field\"\n            />\n          </div>\n          <div className=\"input-group\">\n            <label htmlFor=\"password\">Password:</label>\n            <input\n              type=\"password\"\n              id=\"password\"\n              placeholder=\"Enter your password\"\n              value={password}\n              onChange={(e) => setPassword(e.target.value)}\n              required\n              className=\"input-field\"\n            />\n          </div>\n          <button type=\"submit\" className=\"login-button\">\n            {isRegistering ? 'Register' : 'Login'}\n          </button>\n        </form>\n        <button\n          onClick={() => setIsRegistering(!isRegistering)}\n          className=\"toggle-button\"\n        >\n          {isRegistering ? 'Already have an account? Login' : `Don't have an account? Register`}\n        </button>\n        {message && <p className=\"message\">{message}</p>}\n      </div>\n    </div>\n  );\n}\n\nexport default Admin; "],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,CAAEC,SAAS,KAAQ,OAAO,CAClD,OAASC,QAAQ,KAAQ,kBAAkB,CAC3C,MAAO,CAAAC,MAAM,KAAM,UAAU,CAC7B,OAASC,WAAW,KAAQ,kBAAkB,CAAC,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBAE/C,QAAS,CAAAC,KAAKA,CAAA,CAAG,CACf,KAAM,CAACC,KAAK,CAAEC,QAAQ,CAAC,CAAGX,QAAQ,CAAC,EAAE,CAAC,CACtC,KAAM,CAACY,QAAQ,CAAEC,WAAW,CAAC,CAAGb,QAAQ,CAAC,EAAE,CAAC,CAC5C,KAAM,CAACc,OAAO,CAAEC,UAAU,CAAC,CAAGf,QAAQ,CAAC,EAAE,CAAC,CAC1C,KAAM,CAACgB,aAAa,CAAEC,gBAAgB,CAAC,CAAGjB,QAAQ,CAAC,KAAK,CAAC,CACzD,KAAM,CAAAkB,QAAQ,CAAGd,WAAW,CAAC,CAAC,CAE9BH,SAAS,CAAC,IAAM,CACd;AACA,KAAM,CAAAkB,UAAU,CAAGC,YAAY,CAACC,OAAO,CAAC,YAAY,CAAC,GAAK,MAAM,CAChE,GAAIF,UAAU,CAAE,CACdD,QAAQ,CAAC,YAAY,CAAC,CACxB,CACF,CAAC,CAAE,CAACA,QAAQ,CAAC,CAAC,CAEd,KAAM,CAAAI,UAAU,CAAG,KAAO,CAAAC,CAAC,EAAK,CAC9BA,CAAC,CAACC,cAAc,CAAC,CAAC,CAClBT,UAAU,CAAC,EAAE,CAAC,CAEd,GAAIC,aAAa,CAAE,CACjB,GAAI,CACF;AACA;AACA,KAAM,CAAAS,SAAS,CAAGC,MAAM,CAAC,gCAAgC,CAAC,CAC1D,GAAID,SAAS,GAAK,kBAAkB,CAAE,CAAE;AACtCV,UAAU,CAAC,yCAAyC,CAAC,CACrD,OACF,CAEA,KAAM,CAAAY,IAAI,CAAG,KAAM,CAAAxB,MAAM,CAACyB,OAAO,CAAC,EAAE,CAAC,CACrC,KAAM,CAAAC,cAAc,CAAG,KAAM,CAAA1B,MAAM,CAAC2B,IAAI,CAAClB,QAAQ,CAAEe,IAAI,CAAC,CAExD,KAAM,CAAEI,KAAM,CAAC,CAAG,KAAM,CAAA7B,QAAQ,CAC7B8B,IAAI,CAAC,OAAO,CAAC,CACbC,MAAM,CAAC,CAAC,CAAEvB,KAAK,CAAEwB,eAAe,CAAEL,cAAc,CAAEM,IAAI,CAAE,QAAS,CAAC,CAAC,CAAC,CAEvE,GAAIJ,KAAK,CAAE,CACTK,OAAO,CAACL,KAAK,CAAC,8BAA8B,CAAEA,KAAK,CAAC,CACpDhB,UAAU,CAAC,uBAAuB,EAAIgB,KAAK,CAACjB,OAAO,EAAI,eAAe,CAAC,CAAC,CAC1E,CAAC,IAAM,CACLC,UAAU,CAAC,wCAAwC,CAAC,CACpDJ,QAAQ,CAAC,EAAE,CAAC,CACZE,WAAW,CAAC,EAAE,CAAC,CACfI,gBAAgB,CAAC,KAAK,CAAC,CACzB,CACF,CAAE,MAAOM,CAAC,CAAE,CACVa,OAAO,CAACL,KAAK,CAAC,4CAA4C,CAAER,CAAC,CAAC,CAC9DR,UAAU,CAAC,+CAA+C,CAAC,CAC7D,CACF,CAAC,IAAM,CACL;AACA,KAAM,CAAEsB,IAAI,CAAEC,SAAS,CAAEP,KAAK,CAAEQ,UAAW,CAAC,CAAG,KAAM,CAAArC,QAAQ,CAC1D8B,IAAI,CAAC,OAAO,CAAC,CACbQ,MAAM,CAAC,uBAAuB,CAAC,CAC/BC,EAAE,CAAC,OAAO,CAAE/B,KAAK,CAAC,CAClBgC,MAAM,CAAC,CAAC,CAEX,GAAIH,UAAU,EAAI,CAACD,SAAS,CAAE,CAC5BvB,UAAU,CAAC,oCAAoC,CAAC,CAChD,OACF,CAEA,KAAM,CAAA4B,KAAK,CAAG,KAAM,CAAAxC,MAAM,CAACyC,OAAO,CAAChC,QAAQ,CAAE0B,SAAS,CAACJ,eAAe,CAAC,CAEvE,GAAIS,KAAK,CAAE,CACT5B,UAAU,CAAC,mBAAmB,CAAC,CAC/BK,YAAY,CAACyB,OAAO,CAAC,YAAY,CAAE,MAAM,CAAC,CAC1CzB,YAAY,CAACyB,OAAO,CAAC,UAAU,CAAEP,SAAS,CAACH,IAAI,CAAC,CAChDjB,QAAQ,CAAC,YAAY,CAAC,CACxB,CAAC,IAAM,CACLH,UAAU,CAAC,oCAAoC,CAAC,CAClD,CACF,CACF,CAAC,CAED,mBACET,IAAA,QAAKwC,SAAS,CAAC,iBAAiB,CAAAC,QAAA,cAC9BvC,KAAA,QAAKsC,SAAS,CAAC,WAAW,CAAAC,QAAA,eACxBzC,IAAA,OAAAyC,QAAA,CAAK/B,aAAa,CAAG,gBAAgB,CAAG,aAAa,CAAK,CAAC,cAC3DR,KAAA,SAAMwC,QAAQ,CAAE1B,UAAW,CAAAyB,QAAA,eACzBvC,KAAA,QAAKsC,SAAS,CAAC,aAAa,CAAAC,QAAA,eAC1BzC,IAAA,UAAO2C,OAAO,CAAC,OAAO,CAAAF,QAAA,CAAC,QAAM,CAAO,CAAC,cACrCzC,IAAA,UACE4C,IAAI,CAAC,OAAO,CACZC,EAAE,CAAC,OAAO,CACVC,WAAW,CAAC,kBAAkB,CAC9BC,KAAK,CAAE3C,KAAM,CACb4C,QAAQ,CAAG/B,CAAC,EAAKZ,QAAQ,CAACY,CAAC,CAACgC,MAAM,CAACF,KAAK,CAAE,CAC1CG,QAAQ,MACRV,SAAS,CAAC,aAAa,CACxB,CAAC,EACC,CAAC,cACNtC,KAAA,QAAKsC,SAAS,CAAC,aAAa,CAAAC,QAAA,eAC1BzC,IAAA,UAAO2C,OAAO,CAAC,UAAU,CAAAF,QAAA,CAAC,WAAS,CAAO,CAAC,cAC3CzC,IAAA,UACE4C,IAAI,CAAC,UAAU,CACfC,EAAE,CAAC,UAAU,CACbC,WAAW,CAAC,qBAAqB,CACjCC,KAAK,CAAEzC,QAAS,CAChB0C,QAAQ,CAAG/B,CAAC,EAAKV,WAAW,CAACU,CAAC,CAACgC,MAAM,CAACF,KAAK,CAAE,CAC7CG,QAAQ,MACRV,SAAS,CAAC,aAAa,CACxB,CAAC,EACC,CAAC,cACNxC,IAAA,WAAQ4C,IAAI,CAAC,QAAQ,CAACJ,SAAS,CAAC,cAAc,CAAAC,QAAA,CAC3C/B,aAAa,CAAG,UAAU,CAAG,OAAO,CAC/B,CAAC,EACL,CAAC,cACPV,IAAA,WACEmD,OAAO,CAAEA,CAAA,GAAMxC,gBAAgB,CAAC,CAACD,aAAa,CAAE,CAChD8B,SAAS,CAAC,eAAe,CAAAC,QAAA,CAExB/B,aAAa,CAAG,gCAAgC,kCAAoC,CAC/E,CAAC,CACRF,OAAO,eAAIR,IAAA,MAAGwC,SAAS,CAAC,SAAS,CAAAC,QAAA,CAAEjC,OAAO,CAAI,CAAC,EAC7C,CAAC,CACH,CAAC,CAEV,CAEA,cAAe,CAAAL,KAAK","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}